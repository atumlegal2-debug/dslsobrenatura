<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carteira Virtual C'M</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .card-shadow { box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
        .transaction-in { border-left: 4px solid #10b981; }
        .transaction-out { border-left: 4px solid #ef4444; }
        .transaction-transfer { border-left: 4px solid #3b82f6; }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <!-- Login/Register Screen -->
    <div id="authScreen" class="min-h-screen flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl card-shadow p-8 w-full max-w-md">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-800 mb-2">游눱 Carteira C'M</h1>
                <p class="text-gray-600">Sua carteira virtual segura</p>
            </div>

            <!-- Login Form -->
            <div id="loginForm">
                <h2 class="text-xl font-semibold mb-6 text-center">Entrar na Conta</h2>
                <div class="space-y-4">
                    <input type="text" id="loginUsername" placeholder="Nome de usu치rio" 
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <input type="password" id="loginPassword" placeholder="Senha (4 d칤gitos)" maxlength="4"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <button onclick="login()" class="w-full bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                        Entrar
                    </button>
                </div>
                <p class="text-center mt-4 text-gray-600">
                    N칚o tem conta? 
                    <button onclick="showRegister()" class="text-blue-600 hover:underline font-medium">Criar conta</button>
                </p>
            </div>

            <!-- Register Form -->
            <div id="registerForm" class="hidden">
                <h2 class="text-xl font-semibold mb-6 text-center">Criar Nova Conta</h2>
                <div class="space-y-4">
                    <input type="text" id="registerUsername" placeholder="Nome de usu치rio" 
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <input type="password" id="registerPassword" placeholder="Senha (4 d칤gitos)" maxlength="4"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <input type="password" id="confirmPassword" placeholder="Confirmar senha" maxlength="4"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <button onclick="register()" class="w-full bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
                        Criar Conta
                    </button>
                </div>
                <p class="text-center mt-4 text-gray-600">
                    J치 tem conta? 
                    <button onclick="showLogin()" class="text-blue-600 hover:underline font-medium">Fazer login</button>
                </p>
            </div>
        </div>
    </div>

    <!-- Main App Screen -->
    <div id="appScreen" class="hidden min-h-screen p-4">
        <!-- Header -->
        <div class="bg-white rounded-2xl card-shadow p-6 mb-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">Ol치, <span id="currentUser"></span>!</h1>
                    <p class="text-gray-600" id="userRole">Usu치rio</p>
                </div>
                <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
                    Sair
                </button>
            </div>
        </div>

        <!-- Balance Card -->
        <div class="bg-white rounded-2xl card-shadow p-6 mb-6">
            <div class="text-center">
                <p class="text-gray-600 mb-2">Saldo Atual</p>
                <p class="text-4xl font-bold text-green-600" id="balance">0 C'M</p>
            </div>
        </div>

        <!-- Action Buttons -->
        <div id="actionButtons" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <!-- Regular user buttons -->
            <div id="userButtons" class="contents">
                <button onclick="showUserTransfer()" class="bg-blue-500 text-white p-4 rounded-xl hover:bg-blue-600 transition-colors font-medium">
                    游눶 Enviar Dinheiro
                </button>
                <button onclick="showWithdraw()" class="bg-red-500 text-white p-4 rounded-xl hover:bg-red-600 transition-colors font-medium">
                    游눯 Sacar
                </button>
            </div>
            
            <!-- Bank employee buttons -->
            <div id="bankButtons" class="contents hidden">
                <button onclick="showDeposit()" class="bg-green-500 text-white p-4 rounded-xl hover:bg-green-600 transition-colors font-medium">
                    游눯 Depositar (Banco)
                </button>
                <button onclick="showWithdraw()" class="bg-red-500 text-white p-4 rounded-xl hover:bg-red-600 transition-colors font-medium">
                    游눶 Sacar
                </button>
                <button onclick="showBankTransfer()" class="bg-blue-500 text-white p-4 rounded-xl hover:bg-blue-600 transition-colors font-medium">
                    游낁 Transferir (Banco)
                </button>
            </div>
        </div>

        <!-- Transaction Form -->
        <div id="transactionForm" class="bg-white rounded-2xl card-shadow p-6 mb-6 hidden">
            <h3 class="text-xl font-semibold mb-4" id="formTitle">Transa칞칚o</h3>
            <div class="space-y-4">
                <div id="bankTransferFields" class="hidden space-y-4">
                    <input type="text" id="bankTransferUsername" placeholder="Nome de usu치rio do destinat치rio" 
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <input type="password" id="bankTransferPassword" placeholder="Senha do destinat치rio" maxlength="4"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                </div>
                <div id="userTransferFields" class="hidden space-y-4">
                    <input type="text" id="userTransferUsername" placeholder="Nome de usu치rio do destinat치rio" 
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <textarea id="userTransferMessage" placeholder="Mensagem (opcional)" rows="2"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"></textarea>
                </div>
                <input type="number" id="amount" placeholder="Valor em C'M" min="1" 
                       class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <div class="flex gap-2">
                    <button onclick="processTransaction()" id="confirmBtn" class="flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                        Confirmar
                    </button>
                    <button onclick="hideTransactionForm()" class="flex-1 bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors font-medium">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>

        <!-- Transaction History -->
        <div class="bg-white rounded-2xl card-shadow p-6">
            <h3 class="text-xl font-semibold mb-4">游늵 Hist칩rico de Transa칞칫es</h3>
            <div id="transactionHistory" class="space-y-3">
                <p class="text-gray-500 text-center py-8">Nenhuma transa칞칚o ainda</p>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let users = JSON.parse(localStorage.getItem('walletUsers') || '{}');
        let currentUsername = '';
        let currentTransactionType = '';

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Create bank employee account if doesn't exist
            if (!users['BancoDSL']) {
                users['BancoDSL'] = {
                    password: '5723',
                    balance: 1000000, // Bank has lots of money
                    transactions: [],
                    isBankEmployee: true
                };
                saveUsers();
            }
        });

        function saveUsers() {
            localStorage.setItem('walletUsers', JSON.stringify(users));
        }

        function showLogin() {
            document.getElementById('loginForm').classList.remove('hidden');
            document.getElementById('registerForm').classList.add('hidden');
        }

        function showRegister() {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('registerForm').classList.remove('hidden');
        }

        function register() {
            const username = document.getElementById('registerUsername').value.trim();
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (!username || !password || !confirmPassword) {
                alert('Por favor, preencha todos os campos!');
                return;
            }

            if (password.length !== 4 || !/^\d{4}$/.test(password)) {
                alert('A senha deve ter exatamente 4 d칤gitos!');
                return;
            }

            if (password !== confirmPassword) {
                alert('As senhas n칚o coincidem!');
                return;
            }

            if (users[username]) {
                alert('Este nome de usu치rio j치 existe!');
                return;
            }

            users[username] = {
                password: password,
                balance: 0,
                transactions: [],
                isBankEmployee: false
            };

            saveUsers();
            alert('Conta criada com sucesso!');
            showLogin();
            
            // Clear form
            document.getElementById('registerUsername').value = '';
            document.getElementById('registerPassword').value = '';
            document.getElementById('confirmPassword').value = '';
        }

        function login() {
            const username = document.getElementById('loginUsername').value.trim();
            const password = document.getElementById('loginPassword').value;

            if (!username || !password) {
                alert('Por favor, preencha todos os campos!');
                return;
            }

            if (!users[username] || users[username].password !== password) {
                alert('Nome de usu치rio ou senha incorretos!');
                return;
            }

            currentUsername = username;
            document.getElementById('authScreen').classList.add('hidden');
            document.getElementById('appScreen').classList.remove('hidden');
            
            updateUI();
            
            // Clear form
            document.getElementById('loginUsername').value = '';
            document.getElementById('loginPassword').value = '';
        }

        function logout() {
            currentUsername = '';
            document.getElementById('authScreen').classList.remove('hidden');
            document.getElementById('appScreen').classList.add('hidden');
            hideTransactionForm();
        }

        function updateUI() {
            const user = users[currentUsername];
            document.getElementById('currentUser').textContent = currentUsername;
            document.getElementById('balance').textContent = `${user.balance.toLocaleString()} C'M`;
            
            if (user.isBankEmployee) {
                document.getElementById('userRole').textContent = 'Funcion치rio do Banco';
                document.getElementById('userButtons').classList.add('hidden');
                document.getElementById('bankButtons').classList.remove('hidden');
            } else {
                document.getElementById('userRole').textContent = 'Usu치rio';
                document.getElementById('userButtons').classList.remove('hidden');
                document.getElementById('bankButtons').classList.add('hidden');
            }
            
            updateTransactionHistory();
        }

        function updateTransactionHistory() {
            const user = users[currentUsername];
            const historyDiv = document.getElementById('transactionHistory');
            
            if (user.transactions.length === 0) {
                historyDiv.innerHTML = '<p class="text-gray-500 text-center py-8">Nenhuma transa칞칚o ainda</p>';
                return;
            }

            historyDiv.innerHTML = user.transactions.slice(-10).reverse().map(transaction => {
                const isPositive = transaction.type === 'deposit' || (transaction.type === 'transfer' && transaction.isReceiver);
                const isNegative = transaction.type === 'withdraw' || (transaction.type === 'transfer' && !transaction.isReceiver);
                
                let icon = '游눯';
                let colorClass = 'transaction-in';
                let sign = '+';
                
                if (isNegative) {
                    icon = transaction.type === 'withdraw' ? '游눶' : '游낁';
                    colorClass = 'transaction-out';
                    sign = '-';
                } else if (transaction.type === 'transfer') {
                    icon = '游낁';
                    colorClass = 'transaction-transfer';
                }

                return `
                    <div class="p-4 border rounded-lg ${colorClass}">
                        <div class="flex justify-between items-center">
                            <div class="flex items-center gap-3">
                                <span class="text-2xl">${icon}</span>
                                <div>
                                    <p class="font-medium">${getTransactionDescription(transaction)}</p>
                                    ${transaction.message ? `<p class="text-sm text-blue-600 italic">"${transaction.message}"</p>` : ''}
                                    <p class="text-sm text-gray-500">${transaction.date}</p>
                                </div>
                            </div>
                            <p class="font-bold ${isPositive ? 'text-green-600' : 'text-red-600'}">
                                ${sign}${transaction.amount.toLocaleString()} C'M
                            </p>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function getTransactionDescription(transaction) {
            switch (transaction.type) {
                case 'deposit':
                    return 'Dep칩sito realizado';
                case 'withdraw':
                    return 'Saque realizado';
                case 'transfer':
                    if (transaction.isReceiver) {
                        return `Transfer칡ncia recebida de ${transaction.from}`;
                    } else {
                        return `Transfer칡ncia enviada para ${transaction.to}`;
                    }
                default:
                    return 'Transa칞칚o';
            }
        }

        function showDeposit() {
            currentTransactionType = 'deposit';
            document.getElementById('formTitle').textContent = '游눯 Depositar Dinheiro';
            document.getElementById('confirmBtn').textContent = 'Depositar';
            document.getElementById('confirmBtn').className = 'flex-1 bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 transition-colors font-medium';
            document.getElementById('transferFields').classList.add('hidden');
            document.getElementById('transactionForm').classList.remove('hidden');
            document.getElementById('amount').focus();
        }

        function showWithdraw() {
            currentTransactionType = 'withdraw';
            document.getElementById('formTitle').textContent = '游눶 Sacar Dinheiro';
            document.getElementById('confirmBtn').textContent = 'Sacar';
            document.getElementById('confirmBtn').className = 'flex-1 bg-red-600 text-white p-3 rounded-lg hover:bg-red-700 transition-colors font-medium';
            document.getElementById('transferFields').classList.add('hidden');
            document.getElementById('transactionForm').classList.remove('hidden');
            document.getElementById('amount').focus();
        }

        function showUserTransfer() {
            currentTransactionType = 'userTransfer';
            document.getElementById('formTitle').textContent = '游눶 Enviar Dinheiro';
            document.getElementById('confirmBtn').textContent = 'Enviar';
            document.getElementById('confirmBtn').className = 'flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors font-medium';
            document.getElementById('bankTransferFields').classList.add('hidden');
            document.getElementById('userTransferFields').classList.remove('hidden');
            document.getElementById('transactionForm').classList.remove('hidden');
            document.getElementById('userTransferUsername').focus();
        }

        function showBankTransfer() {
            currentTransactionType = 'bankTransfer';
            document.getElementById('formTitle').textContent = '游낁 Transferir Dinheiro (Funcion치rio do Banco)';
            document.getElementById('confirmBtn').textContent = 'Transferir';
            document.getElementById('confirmBtn').className = 'flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors font-medium';
            document.getElementById('userTransferFields').classList.add('hidden');
            document.getElementById('bankTransferFields').classList.remove('hidden');
            document.getElementById('transactionForm').classList.remove('hidden');
            document.getElementById('bankTransferUsername').focus();
        }

        function hideTransactionForm() {
            document.getElementById('transactionForm').classList.add('hidden');
            document.getElementById('amount').value = '';
            document.getElementById('bankTransferUsername').value = '';
            document.getElementById('bankTransferPassword').value = '';
            document.getElementById('userTransferUsername').value = '';
            document.getElementById('userTransferMessage').value = '';
        }

        function processTransaction() {
            const amount = parseInt(document.getElementById('amount').value);
            
            if (!amount || amount <= 0) {
                alert('Por favor, insira um valor v치lido!');
                return;
            }

            const user = users[currentUsername];

            switch (currentTransactionType) {
                case 'deposit':
                    user.balance += amount;
                    user.transactions.push({
                        type: 'deposit',
                        amount: amount,
                        date: new Date().toLocaleString('pt-BR')
                    });
                    alert(`Dep칩sito de ${amount.toLocaleString()} C'M realizado com sucesso!`);
                    break;

                case 'withdraw':
                    if (user.balance < amount) {
                        alert('Saldo insuficiente!');
                        return;
                    }
                    user.balance -= amount;
                    user.transactions.push({
                        type: 'withdraw',
                        amount: amount,
                        date: new Date().toLocaleString('pt-BR')
                    });
                    alert(`Saque de ${amount.toLocaleString()} C'M realizado com sucesso!`);
                    break;

                case 'userTransfer':
                    const userTargetUsername = document.getElementById('userTransferUsername').value.trim();
                    const userTransferMessage = document.getElementById('userTransferMessage').value.trim();
                    
                    if (!userTargetUsername) {
                        alert('Por favor, digite o nome de usu치rio do destinat치rio!');
                        return;
                    }

                    if (!users[userTargetUsername]) {
                        alert('Usu치rio n칚o encontrado!');
                        return;
                    }

                    if (userTargetUsername === currentUsername) {
                        alert('Voc칡 n칚o pode enviar dinheiro para si mesmo!');
                        return;
                    }

                    if (user.balance < amount) {
                        alert('Saldo insuficiente!');
                        return;
                    }

                    // Process user transfer
                    user.balance -= amount;
                    users[userTargetUsername].balance += amount;

                    // Add transaction to sender
                    user.transactions.push({
                        type: 'transfer',
                        amount: amount,
                        to: userTargetUsername,
                        message: userTransferMessage,
                        isReceiver: false,
                        date: new Date().toLocaleString('pt-BR')
                    });

                    // Add transaction to receiver
                    users[userTargetUsername].transactions.push({
                        type: 'transfer',
                        amount: amount,
                        from: currentUsername,
                        message: userTransferMessage,
                        isReceiver: true,
                        date: new Date().toLocaleString('pt-BR')
                    });

                    alert(`Transfer칡ncia de ${amount.toLocaleString()} C'M para ${userTargetUsername} realizada com sucesso!`);
                    break;

                case 'bankTransfer':
                    const bankTargetUsername = document.getElementById('bankTransferUsername').value.trim();
                    const bankTargetPassword = document.getElementById('bankTransferPassword').value;
                    
                    if (!bankTargetUsername || !bankTargetPassword) {
                        alert('Por favor, preencha todos os campos!');
                        return;
                    }

                    if (!users[bankTargetUsername]) {
                        alert('Usu치rio n칚o encontrado!');
                        return;
                    }

                    if (users[bankTargetUsername].password !== bankTargetPassword) {
                        alert('Senha do destinat치rio incorreta!');
                        return;
                    }

                    if (bankTargetUsername === currentUsername) {
                        alert('Voc칡 n칚o pode transferir para si mesmo!');
                        return;
                    }

                    if (user.balance < amount) {
                        alert('Saldo insuficiente no banco!');
                        return;
                    }

                    // Process bank transfer
                    user.balance -= amount;
                    users[bankTargetUsername].balance += amount;

                    // Add transaction to sender (bank)
                    user.transactions.push({
                        type: 'transfer',
                        amount: amount,
                        to: bankTargetUsername,
                        isReceiver: false,
                        date: new Date().toLocaleString('pt-BR')
                    });

                    // Add transaction to receiver
                    users[bankTargetUsername].transactions.push({
                        type: 'transfer',
                        amount: amount,
                        from: currentUsername,
                        isReceiver: true,
                        date: new Date().toLocaleString('pt-BR')
                    });

                    alert(`Transfer칡ncia de ${amount.toLocaleString()} C'M para ${bankTargetUsername} realizada com sucesso!`);
                    break;
            }

            saveUsers();
            updateUI();
            hideTransactionForm();
        }

        // Allow Enter key to submit forms
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                if (!document.getElementById('authScreen').classList.contains('hidden')) {
                    if (!document.getElementById('loginForm').classList.contains('hidden')) {
                        login();
                    } else {
                        register();
                    }
                } else if (!document.getElementById('transactionForm').classList.contains('hidden')) {
                    processTransaction();
                }
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96bc7926b6326f7f',t:'MTc1NDYyOTQ2OS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
